# -*- coding: utf-8 -*-
"""Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sHyp4nHAdS7zEhedI8PPaaGP1RnIfNa_

## **THEORITICAL QUESTIONS**

Ans 1.
 Data structures are ways of organizing and storing data so that they can be accessed and manipulated.They are important because large amount of data can be easily managed using their different types such as lists, tuples, sets, dictioneries having their own ways.

Ans 2.
Mutable data types are the data types that can be changed or modified.For ex.Lists,Sets
"""

a = ["rahul", 1, 3, True] #list
a.append("roy")
a

"""Immutable data types are the data types which can not be modified or changed.Ex.Tuples



"""

b = ("flower",2, 3.2)#tuple
b.remove(2)

"""Ans 3.Main difference between list and tuples is that lists are mutable ie can be changed or modified and tuples can not be modified. And syntax for list is [] and for tuple is ().

Ans 4.Dicitionaries have key value pairs where each key have its own unique value, syntax example for it is:
c = {"name": "rahul", "age":23}

Ans 5.We use sets instead of lists because of its feature of elimination of dublicates.

Ans 6. String is used for **only** characters, is immutable while lists is mutable and can store all types of data like fraction, integers, characters,etc.

Ans 7.Tuples are data structures which are immutable due to which data cannot be modified later.So Tuple ensure data integrity in python.

Ans 8.Dictionaries are key value pairs, but for storing them hash function is used in which hash tables are used.

Ans 9.Yes, lists can contain various types of data types such as characters, fractions, integers,etc.

Ans 10.
For maintaining data integrity, strings in python are immutable so that they cannot be changed or modified.

Ans 11.
Dictionaries are the key value pairs in which each key have its own unique value which lists don't have, also in dictionaries mapping can be done of the values using their keys.

Ans 12.
Generally, tuples are used for ensuring data integrity due to its immutability. For instance, there might be some important data which should not be modified or changed, so, there instead of lists tuples shall be used.

Ans 13.
Sets eliminate the duplicate values in python and also the same cannot be added.

Ans 14.
for dicitonary in checks the presence of key and in list it checks for the presene of its element.

Ans 15.
Elements of tuple cannot be modified because they are immutable. It ensures data integrity.

Ans 16.
In nested dictionary, we have dictionary within a dictionary. For example:
a = {
  "s" : {"age":22, "group":"a"}
}

Ans 17.
o(1) time complexity is used for accessing the elements in dictionaries.

Ans 18.
For storing the elements , and for accesing them using index.

Ans 19.


Ans 20.
In lists, data retreival can be done using indes
while in dictionaries, the same of values is done using key.

# **PRACTICAL QUESTIONS**
"""

#Ans 1.
name = "krish"
print(name)

#Ans 2.
a = "hello world"
len(a)

#Ans 3.
b = "python programming"
b[0:3]

#Ans 4.
c = "hello"
c.upper()

#Ans 5.
d = "I like apple"
d = d.replace("apple","orange")
d

#Ans 6.
a = [1,2,3,4,5]
a

#Ans 7.
a = [1,2,3,4]
a.append(10)
a

#Ans 8.
num = [1,2,3,4,5]
num.remove(3)
num

#Ans 9.
ch = ["a","b","c","d"]
ch[1]

#Ans 10.
a = [10,20,30,40,50]
a.reverse()
a

#Ans 11.
b = (10,20,30)
b

#Ans 12.
c = ("apple","banana","cherry")
c[1]

#Ans 13.
d = (1,2,3,2,4,2)
d.count(2)

#Ans 14.
e = ("dog","cat","rabbit")
e.index("cat")

#Ans 15.
f = ("apple","orange","banana")
"banana" in f

#Ans 16.
a = {1,2,3,4,5}
a

#Ans 17.
b = {1,2,3,4}
b.add(6)
b

#Ans 18.
c = (10,20,30)
c

#Ans 19.
d = ("apple","banana","cherry")
d[0]

#Ans 20.
d = (1,2,3,2,4,2)
d.count(2)

#Ans 21.
e = ("dog","cat","rabbit")
e.index("cat")

#Ans 22.
f = ("apple","orange","banana")
"banana" in f

#Ans 23.
a = {1,2,3,4,5}
a

#Ans 24.
b = {1,2,3,4}
b.add(6)
b